import streamlit as st
from gemini_utility import get_gemini_response, configure_api_key

# Configura a API Key do Gemini usando st.secrets (boa pr√°tica de seguran√ßa)
configure_api_key()

# --- Configura√ß√µes da P√°gina ---
st.set_page_config(page_title="GATEBOT - Seu Assistente de IA", page_icon="ü§ñ")

# --- CSS Personalizado para a Sidebar ---
# Este bloco de CSS foi adicionado no in√≠cio para estilizar a sidebar.
st.markdown("""
<style>
    /* Estilo para a cor de fundo da sidebar. Voc√™ pode mudar o #262730 para outra cor. */
    .st-emotion-cache-nahz7x {
        background-color: #262730;
    }
    /* Estilo para o texto do sidebar. Voc√™ pode mudar a cor e o tamanho da fonte. */
    .st-emotion-cache-1pxazr6 {
        color: white;
    }
    /* Estilo para links ou elementos interativos na sidebar */
    .st-emotion-cache-1km1mho a {
        color: #8D8DFF; /* Um azul mais claro para links */
    }
</style>
""", unsafe_allow_html=True)


# --- T√≠tulo e Imagem de Capa ---
st.title("GATEBOT")
st.header("Seu Assistente de IA com Google Gemini")

# A imagem de capa do GATEBOT, agora hospedada no GitHub e funcionando!
st.image("https://raw.githubusercontent.com/brun372/gatebot-online/main/B5w10V3.PNG", caption="Seu amigo digital para qualquer desafio", width=300)

# --- Mensagem de Boas-Vindas ---
st.write("Bem-vindo ao GATEBOT!")
st.write("‚≠ê Ei! Tudo bem? Eu sou o GATEBOT, seu parceiro virtual. üòâ")
st.write("T√¥ aqui pra trocar ideia e te ajudar no que for poss√≠vel!")

# --- Inicializa√ß√£o do Hist√≥rico de Conversa (Session State) ---
# Isso garante que o hist√≥rico da conversa seja mantido entre as intera√ß√µes.
if 'messages' not in st.session_state:
    st.session_state.messages = []

# --- Exibir Hist√≥rico de Conversa ---
# Isso mostra todas as mensagens anteriores na tela.
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# --- Entrada de Texto para o Usu√°rio ---
# Aqui o usu√°rio digita sua pergunta.
prompt = st.chat_input("Pergunte algo ao GATEBOT...")

if prompt:
    # Adiciona a pergunta do usu√°rio ao hist√≥rico e exibe
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Gera a resposta do Gemini
    with st.chat_message("assistant"):
        with st.spinner("Pensando..."): # Mostra um spinner enquanto o Gemini pensa
            response = get_gemini_response(prompt) # Chama a fun√ß√£o que interage com a API do Gemini
        st.markdown(response) # Exibe a resposta do Gemini

    # Adiciona a resposta do Gemini ao hist√≥rico
    st.session_state.messages.append({"role": "assistant", "content": response})

# --- Bot√£o Limpar Conversa ---
# Este bot√£o foi adicionado no final da √°rea principal.
# Ele limpa o hist√≥rico de mensagens e recarrega a p√°gina.
st.write("---") # Adiciona uma linha horizontal para separar o bot√£o
if st.button("Limpar Conversa"):
    st.session_state.messages = []  # Zera o hist√≥rico de mensagens
    st.experimental_rerun()         # Recarrega o aplicativo para refletir a mudan√ßa
