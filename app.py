import streamlit as st
import google.generativeai as genai
import os

# --- Configura√ß√£o do Streamlit ---
st.set_page_config(page_title="GATEBOT: Seu Assistente de IA")

st.title("ü§ñ GATEBOT")
st.header("Seu Assistente de IA com Google Gemini")

# --- Adicionando a Imagem de "Capa" para o Chat ---
# IMPORTANTE: Voc√™ precisa substituir "URL_DA_SUA_IMAGEM_AQUI" pelo link REAL da imagem que voc√™ quer usar.
# Se voc√™ quiser usar a imagem "ChatGPT Image 16 de mai. de 2025, 08_55_28.png",
# voc√™ precisar√° primeiro fazer upload dela para um servi√ßo como Imgur ou GitHub Gist (e obter o link RAW)
# ou para dentro do seu pr√≥prio reposit√≥rio GitHub e pegar o link RAW dela.
# Por exemplo, se fosse uma imagem online:
st.image("https://i.imgur.com/B5w10V3.jpeg", caption="Bem-vindo ao GATEBOT!", width=300)
# Usei um placeholder de imagem do Unsplash. SUBSTITUA PELO SEU LINK!

st.write("üåü Ei! Tudo bem? Eu sou o GATEBOT, seu parceiro virtual. üòâ")
st.write("T√¥ aqui pra trocar ideia e te ajudar no que for poss√≠vel!")

# --- Configura√ß√£o da API do Google Gemini (Lendo de VARI√ÅVEL DE AMBIENTE) ---
API_KEY = os.getenv("GOOGLE_API_KEY")

if not API_KEY:
    st.error("‚ùå ERRO: Sua chave de API `GOOGLE_API_KEY` n√£o foi carregada.")
    st.info("Por favor, configure `GOOGLE_API_KEY` com sua chave real nos 'Secrets' do Streamlit Cloud.")
    st.stop()

genai.configure(api_key=API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

# --- Sele√ß√£o da √Årea no Sidebar ---
st.sidebar.header("Escolha sua √°rea:")
area_escolhida = st.sidebar.radio(
    "Em qual dessas √°reas voc√™ mais precisa de uma for√ßa?",
    ("üíª Tecnologia (TI)", "üè• Sa√∫de e bem-estar", "üìö Estudos e Educa√ß√£o", "üí∏ Dinheiro e Finan√ßas", "ü§î Outra coisa")
)

st.sidebar.write(f"Sua √°rea selecionada: **{area_escolhida}**")

# Inicializa o hist√≥rico do chat se n√£o existir na sess√£o
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
    st.session_state.chat_session = model.start_chat(history=[])

# Exibe o hist√≥rico do chat (incluindo imagens se houver)
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        if "image_url" in message:
            st.image(message["image_url"], caption=message.get("image_caption", ""))

# --- Fun√ß√£o para simular pesquisa de imagem (VOC√ä PODE SUBSTITUIR POR UMA API REAL) ---
def get_image_from_query(query_text):
    # Esta √© uma SIMULA√á√ÉO para fins de demonstra√ß√£o.
    # Para uma funcionalidade REAL de busca de imagens, voc√™ precisaria integrar uma API
    # como a Google Custom Search API, Bing Image Search API, etc.
    # Exemplo:
    # from Google Search_api import search_image # Se voc√™ tivesse uma integra√ß√£o real

    query_text_lower = query_text.lower()
    if "gato" in query_text_lower:
        return "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Cat03.jpg/1200px-Cat03.jpg", "Um gato fofo"
    elif "cachorro" in query_text_lower:
        return "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Canis_lupus_familiaris_%28Linnaeus%2C_1758%29.jpg/1200px-Canis_lupus_familiaris_%28Linnaeus%2C_1758%29.jpg", "Um cachorro amig√°vel"
    elif "computador" in query_text_lower:
        return "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Computer_desktop_icon.svg/1024px-Computer_desktop_icon.svg.png", "Um computador desktop"
    elif "lua" in query_text_lower:
        return "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/FullMoon2010.jpg/1200px-FullMoon2010.jpg", "A Lua Cheia"
    elif "sol" in query_text_lower:
        return "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/Solar_Prominence_from_STEREO_--_September_29%2C_2008.jpg/1200px-Solar_Prominence_from_STEREO_--_September_29%2C_2008.jpg", "O Sol"
    else:
        return None, None

# --- Entrada de Perguntas (Chat Input) ---
user_query = st.chat_input("Qual √© a sua d√∫vida ou problema? (Digite 'experty' para encerrar)")

if user_query:
    st.session_state.chat_history.append({"role": "user", "content": user_query})
    with st.chat_message("user"):
        st.markdown(user_query)

    if user_query.lower() == 'experty':
        st.session_message = st.chat_message("ai")
        st.session_message.markdown("üëã Foi √≥timo conversar com voc√™! At√© a pr√≥xima! üòä")
        st.session_state.chat_history.append({"role": "ai", "content": "üëã Foi √≥timo conversar com voc√™! At√© a pr√≥xima! üòä"})
        st.stop()

    st.session_message = st.chat_message("ai")
    with st.spinner("ü§î Deixa eu pensar um pouquinho..."):
        try:
            prompt_instruction = (
                f"Voc√™ √© um assistente virtual chamado GATEBOT. O usu√°rio escolheu a √°rea de '{area_escolhida}'. "
                "Responda √† seguinte pergunta de forma √∫til, amig√°vel, completa e detalhada, "
                "mas sempre organizando o texto com par√°grafos claros e, se poss√≠vel, listas ou t√≥picos para facilitar a leitura. "
                "Use negritos para destacar informa√ß√µes importantes. "
                "Mantenha um tom acess√≠vel, como se estivesse explicando para algu√©m que est√° come√ßando. "
                "Se a pergunta for sobre um t√≥pico fora de '{area_escolhida}', mencione isso de forma clara e breve antes de prosseguir com a resposta."
                "Se o usu√°rio pedir por uma imagem (ex: 'mostre uma imagem de'), tente encontrar uma imagem relacionada. Use frases como 'Aqui est√° uma imagem de...'."
            )

            # Primeiro, tenta obter uma resposta de texto do Gemini
            response = st.session_state.chat_session.send_message(f"{prompt_instruction}\nPergunta: {user_query}")
            ai_response = response.text

            st.session_message.markdown(ai_response)
            st.session_state.chat_history.append({"role": "ai", "content": ai_response})

            # --- L√≥gica para pesquisa de imagens ---
            # Verifica se o usu√°rio pediu uma imagem. Voc√™ pode refinar as palavras-chave.
            if any(phrase in user_query.lower() for phrase in ["imagem", "foto", "mostre uma foto", "mostre uma imagem"]):
                # Extrai o que o usu√°rio quer ver na imagem
                image_search_query = user_query.lower()
                image_search_query = image_search_query.replace("mostre uma imagem de", "").replace("imagem de", "").replace("foto de", "").strip()
                
                # Chama a fun√ß√£o simulada de pesquisa de imagem
                image_url, image_caption = get_image_from_query(image_search_query)

                if image_url:
                    st.image(image_url, caption=f"Imagem relacionada a: {image_caption}")
                    # Adiciona a imagem ao hist√≥rico de forma que possa ser reexibida
                    st.session_state.chat_history.append({"role": "ai", "image_url": image_url, "image_caption": image_caption})
                else:
                    st.session_message.markdown("Desculpe, n√£o consegui encontrar uma imagem para isso no momento na minha base simulada.")
                    st.session_state.chat_history.append({"role": "ai", "content": "Desculpe, n√£o consegui encontrar uma imagem para isso no momento na minha base simulada."})

        except Exception as e:
            error_message = f"Desculpe, algo deu errado ao tentar obter uma resposta (Erro: {e}). Verifique sua conex√£o com a internet e se sua chave de API est√° correta e ativa. Detalhe: {e}"
            st.session_message.error(error_message)
            st.session_state.chat_history.append({"role": "ai", "content": error_message})
